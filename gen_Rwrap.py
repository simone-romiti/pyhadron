# Importing all the R functions from a library 'lib'

from rpy2.robjects.packages import importr
import rpy2.robjects as robjects

def import_library(output, name, lib_loc=None):
    """
    Import an R library creating python wrappers for all its functions
    """
    
    if(lib_loc != None):
        importr(name = name, lib_loc = lib_loc)
    else:
        importr(name = name)
    ####
    
    L0 = robjects.r["lsf.str"]("package:"+name) # list of functions
    L1 = list(L0) # list of functions, classes, etc.
    L2 = ["\n" + x + " :" for x in L0] # list of names as "\n name :"
    S1 = str(L0.__str__()) # output string

    # indices of substrings of S1 corresponsing to the elements of L2 
    K1 = [S1.find(l) for l in L2] + [len(S1)-1]

    N = len(L0)
    D1 = [] # descriptions in S1
    for i in range(N):
        i1 = K1[i] + len(L2[i])
        i2 = K1[i+1]
        D1.append(S1[i1:i2])
    ####

    T1 = [] # types: function, class, etc.
    for d in D1:
        T1.append(d.split(" ")[1])
    ####

    # T2 = N*["function"]
    # if(T1 == T2):
    #     print("Everything in hadron is a function object")
    # else:
    #     raise("Error: not everything in hadron is a function!")
    # ####

    F_out = open(output, mode = "w")

    F_out.write("## file generated by automatic import of hadron functions\n\n")
    F_out.write("import rpy2.robjects as robjects\n")
    F_out.write("from rpy2.robjects.packages import importr\n")
    F_out.write("importr(\""+name+"\", lib_loc = \""+lib_loc+"\")\n")
    F_out.write("\n")

    M1 = [x.replace(".", "_") for x in L1]
    for i in range(N):
        if(not ((L1[i][0]).isalpha())):
            continue # function operators not accepted. Use python for that!
        ####
        s = M1[i] + " = robjects.r[\"" + L1[i] + "\"]\n"
        F_out.write(s)
    ####
    F_out.close()

    print(name, "successfully imported.")
####

# ----------------------------------------
# Importing the libraries used in pyhadron
# ----------------------------------------

import Rwrap.lib_loc as lib_loc
import_library(output="Rwrap/base.py", name="base", lib_loc=lib_loc.base)
import_library(output="Rwrap/compositions.py", name="compositions", lib_loc=lib_loc.compositions)
import_library(output="Rwrap/graphics.py", name="graphics", lib_loc=lib_loc.graphics)

import_library(output="Rwrap/hadron.py", name="hadron", lib_loc=lib_loc.hadron)
